@using System.Linq.Expressions
@typeparam TItem

@code {
    [CascadingParameter]
    private DataGrid<TItem> ParentGrid { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Expression<Func<TItem, object>> Value { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (ParentGrid == null)
            throw new ArgumentException("Data Column must exists within a DataGrid.");

        ParentGrid.AddColumn(this);
    }

    public RenderFragment Render(object obj)
    {
        return builder =>
        {
            builder.OpenElement(0, "td");
            var contentValue = obj.GetType().GetProperty(GetMemberName(Value)).GetValue(obj);
            builder.AddContent(1, contentValue);
            builder.CloseElement();
        };
    }

    private static string GetMemberName<T>(Expression<T> expression)
    {
        return expression.Body switch{
            MemberExpression m => m.Member.Name,
            UnaryExpression u when u.Operand is MemberExpression m => m.Member.Name,
            _ => throw new NotSupportedException($"Expression of type '{expression.GetType()}' is not supported")
            };
    }

}
